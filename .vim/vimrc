" Andrew Faust

execute pathogen#infect()

syntax enable
au BufReadPost *.swipl set syntax=prolog	" Make .swipl files use prolog syntax
set filetype=dosini
set nocompatible

" Colors and Highlighting {{{
	colorscheme molokai
	set background=dark
	hi Visual term=reverse cterm=reverse 
	" Make background terminal background
	hi Normal ctermbg=none
	" Make unwritten portion background terminal background
	highlight NonText ctermbg=none
	" Make line number background terminal background
	highlight LineNr ctermfg=grey ctermbg=none
	let g:rehash256 = 1				" Use 256 color
	set cursorline		 			" Highlight current line
" }}}	

" Searching {{{
	set showmatch					" Highlight matching brackets
	set incsearch					" Search as you type
	set hlsearch					" Highlight search matches
" }}}

" Indentation {{{
	filetype plugin indent on
	set autoindent					" Automatic indentation
	set smartindent
	set tabstop=8
	set textwidth=80				" Hard wrap line at 80 characters
	set shiftwidth=4
	set wrapmargin=0
	set colorcolumn=80
	set formatoptions=tcq
" }}}

" Folding {{{
	set foldenable					" Allow folds
	set foldlevelstart=10				" Open most folds by default
	set modelines=1
" }}}

" Misc {{{
	set number					" Show line numbers
	set splitright					" Make panes split to the right
	set mouse=n					" Allow mouse input in normal mode
	set scrolloff=5 
	set wildmenu 
" }}}

 " Keymaps {{{
	let mapleader=","       " leader is comma
	" Ctrl-left/right to switch tabs, Alt-left/right to move tabs
	nnoremap <C-Left> :tabprevious<CR>
	nnoremap <C-Right> :tabnext<CR>
	nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
	nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>

	" Space opens/closes folds
	nnoremap <space> za

	" turn off search highlight
	nnoremap <leader><space> :nohlsearch<CR>	

	inoremap jj <Esc>

	" move to beginning/end of line
	nnoremap B ^
	nnoremap E $

	" Disable $ and ^
	nnoremap $ <nop>
	nnoremap ^ <nop>

	" Map : key to ;
	nore ; :
	" Map ; key to \
	nore \ ;	

	" Keymap to tagbar
	nmap <F8> :TagbarToggle<CR>
" }}}

" NerdCommenter {{{
	" Add spaces after comment delimiters by default
	let g:NERDSpaceDelims = 1

	" Use compact syntax for prettified multi-line comments
	let g:NERDCompactSexyComs = 1

	" Align line-wise comment delimiters flush left instead of following code
	" indentation
	let g:NERDDefaultAlign = 'left'

	" Allow commenting and inverting empty lines (useful when commenting a region)
	let g:NERDCommentEmptyLines = 1

	" Enable trimming of trailing whitespace when uncommenting
	let g:NERDTrimTrailingWhitespace = 1
" }}}

" Lightline {{{
	set laststatus=2				" Used for lightline
	set noshowmode					" Hide current mode in command line
	set ttimeoutlen=50				" Faster mode updates in lightline
	let g:lightline = {
	      \ 'active': {
	      \   'left': [ [ 'mode', 'paste' ],
	      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
	      \ },
	      \ 'component_function': {
	      \   'fugitive': 'LightlineFugitive',
	      \   'readonly': 'LightlineReadonly',
	      \   'modified': 'LightlineModified',
	      \   'filename': 'LightlineFilename'
	      \ },
	      \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
	      \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
	      \ }

	" + icon indicates file was modified
	function! LightlineModified()
		if &filetype == "help"
			return ""
		elseif &modified
			return "+"
		elseif &modifiable
			return ""
		else
			return ""
		endif
	endfunction

	" Add lock icon to read-only file names
	function! LightlineReadonly()
		if &filetype == "help"
			return ""
		elseif &readonly
			return ""
		else
			return ""
		endif
	endfunction

	" Add branch icon to fugitive branch
	function! LightlineFugitive()
		if exists('*fugitive#head')
			let branch = fugitive#head()
			return branch !=# '' ? ' '.branch : ''
		endif
		return ''
	endfunction

	if !has('gui_running')
		  set t_Co=256
	endif

	function! LightlineFilename()
	  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
		 \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
		 \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
	endfunction
" }}}

" vim:foldmethod=marker:foldlevel=0
