execute pathogen#infect()
filetype plugin indent on

syntax enable

colorscheme monokai
" Make background terminal background
hi Normal ctermbg=none
" Make unwritten portion background terminal background
highlight NonText ctermbg=none
" Make line number background terminal background
highlight LineNr ctermfg=grey ctermbg=none

set filetype=dosini
set number
set showmatch
set hlsearch
set laststatus=2
set guifont=Hack13
set noshowmode
" Hard wrap line at 80 characters
set tw=80
" Make lines shift over 4 characters from the previous line if wrapped
set breakindent
set breakindentopt=shift:4
set splitright
au BufReadPost *.swipl set syntax=prolog

" Ctrl-left/right to switch tabs, Alt-left/right to move tabs
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>


" ===== TAGBAR =====

" Keymap to tagbar
nmap <F8> :TagbarToggle<CR>


" ==== NERDCOMMENTER ====

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1


" ===== LIGHTLINE =====

let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
      \ 'subseparator': { 'left': "\uE0B1", 'right': "\uE0B3" }
      \ }

" + icon indicates file was modified
function! LightlineModified()
	if &filetype == "help"
		return ""
	elseif &modified
		return "+"
	elseif &modifiable
		return ""
   	else
		return ""
	endif
endfunction

" Add lock icon to read-only file names
function! LightlineReadonly()
	if &filetype == "help"
		return ""
	elseif &readonly
		return ""
	else
		return ""
	endif
endfunction

" Add branch icon to fugitive branch
function! LightlineFugitive()
	if exists('*fugitive#head')
		let branch = fugitive#head()
		return branch !=# '' ? ' '.branch : ''
	endif
	return ''
endfunction

if !has('gui_running')
	  set t_Co=256
endif

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
         \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction
